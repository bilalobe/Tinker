@page "/sales/create"
@using Microsoft.AspNetCore.Authorization
@using Tinker.Core.Services.Customers
@using Tinker.Core.Services.Orders
@using Tinker.Core.Services.Products
@using Tinker.Shared.DTOs.Customers
@using Tinker.Shared.DTOs.Inventory
@using Tinker.Shared.DTOs.Orders
@attribute [Authorize(Roles = "SalesPerson,Admin")]
@inject ProductService ProductService
@inject CustomerService CustomerService
@inject OrderService OrderService
@inject NavigationManager NavigationManager

<h3>New Sale</h3>

<div class="card mb-4">
    <div class="card-body">
        <h4>Customer Details</h4>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Select Customer</label>
                    <select class="form-select" @bind="selectedCustomerId">
                        <option value="0">Select a customer...</option>
                        @foreach (var customer in customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card mb-4">
    <div class="card-body">
        <h4>Products</h4>
        <div class="row mb-3">
            <div class="col-md-6">
                <select class="form-select" @bind="selectedProductId">
                    <option value="0">Select a product...</option>
                    @foreach (var product in availableProducts)
                    {
                        <option value="@product.Id">@product.Name - @product.Price.ToString("C")</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <input type="number" class="form-control" @bind="quantity" min="1" placeholder="Quantity"/>
            </div>
            <div class="col-md-3">
                <button class="btn btn-secondary" @onclick="AddItem">Add Item</button>
            </div>
        </div>

        @if (orderItems.Any())
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                    <th>Total</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in orderItems)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@item.UnitPrice.ToString("C")</td>
                        <td>@((item.Quantity * item.UnitPrice).ToString("C"))</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
                <tfoot>
                <tr>
                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                    <td><strong>@orderItems.Sum(i => i.Quantity * i.UnitPrice).ToString("C")</strong></td>
                    <td></td>
                </tr>
                </tfoot>
            </table>

            <div class="d-flex justify-content-end gap-2">
                <button class="btn btn-primary" @onclick="ProcessSale">
                    <i class="fas fa-check"></i> Complete Sale
                </button>
                <button class="btn btn-outline-secondary" @onclick="@(() => NavigationManager.NavigateTo("/sales"))">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        }
    </div>
</div>

@code {
    private List<CustomerDto> customers = new();
    private List<ProductDto> availableProducts = new();
    private readonly List<OrderItemDto> orderItems = new();
    private int selectedCustomerId;
    private int selectedProductId;
    private int quantity = 1;

    protected override async Task OnInitializedAsync()
    {
        customers = (await CustomerService.GetCustomers()).ToList();
        availableProducts = (await ProductService.GetProducts()).ToList();
    }

    private async Task AddItem()
    {
        if (selectedProductId == 0 || quantity <= 0) return;

        var product = availableProducts.FirstOrDefault(p => p.Id == selectedProductId);
        if (product == null) return;

        var item = new OrderItemDto
        {
            ProductId = product.Id,
            ProductName = product.Name,
            Quantity = quantity,
            UnitPrice = product.Price,
            DiscountPercentage = 0
        };

        orderItems.Add(item);
        selectedProductId = 0;
        quantity = 1;

        await Task.CompletedTask;
    }


    private void RemoveItem(OrderItemDto item)
    {
        orderItems.Remove(item);
    }

    private async Task ProcessSale()
    {
        if (selectedCustomerId == 0 || !orderItems.Any()) return;

        var orderDto = new OrderDto
        {
            CustomerId = selectedCustomerId,
            CustomerName = customers.First(c => c.Id == selectedCustomerId).Name,
            Date = DateTime.UtcNow,
            Items = orderItems,
            TotalAmount = orderItems.Sum(i => i.Quantity * i.UnitPrice * (1 - i.DiscountPercentage / 100))
        };

        await OrderService.ProcessOrder(orderDto);
        NavigationManager.NavigateTo("/sales");
    }

}