@page "/reports"
@using Microsoft.AspNetCore.Authorization
@using Tinker.Core.Services.Reporting
@attribute [Authorize(Roles = "Admin,Manager")]
@attribute [Authorize(Policy = "CanViewReports")]
@inject ReportingService ReportingService
@inject NavigationManager NavigationManager

<SeoMetadata
    Title="Reports Dashboard - Tinker POS"
    Description="@($"View sales analytics and reports from {startDate:d} to {endDate:d}. Total sales: {salesReport?.TotalSales:C}")"
    Keywords="reports, analytics, sales reports, inventory reports"
    ImageUrl="@($"{NavigationManager.BaseUri}images/dashboard-preview.png")"
    CanonicalUrl="@NavigationManager.Uri"/>

<PageHeader Title="Reports" Icon="fa-chart-line">
    <ActionButtons>
        <DateRangePicker @bind-StartDate="startDate" @bind-EndDate="endDate" OnRangeChanged="LoadReports"/>
    </ActionButtons>
</PageHeader>

<PageErrorBoundary>
    <LoadingState IsLoading="@isLoading" Message="Loading reports...">
        <div class="row">
            <!-- Sales Summary -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <h5 class="card-title">Total Sales</h5>
                        <h2>@salesReport?.TotalSales.ToString("C")</h2>
                        <p>@salesReport?.TotalOrders orders</p>
                    </div>
                </div>
            </div>

            <!-- Stock Status -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card bg-warning text-dark">
                    <div class="card-body">
                        <h5 class="card-title">Low Stock Items</h5>
                        <h2>@inventoryReport?.LowStockProducts.Count</h2>
                        <p>Requires attention</p>
                    </div>
                </div>
            </div>

            <!-- Expiry Alerts -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <h5 class="card-title">Expiring Items</h5>
                        <h2>@inventoryReport?.ExpiringProducts.Count</h2>
                        <p>Within 90 days</p>
                    </div>
                </div>
            </div>

            <!-- Customer Stats -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h5 class="card-title">Active Customers</h5>
                        <h2>@customerReport?.ActiveCustomers</h2>
                        <p>Last 3 months</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Sales Chart -->
            <div class="col-md-8 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Sales Trend</h5>
                        <SalesChart Data="@salesReport?.DailySales"/>
                    </div>
                </div>
            </div>

            <!-- Top Products -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Top Products</h5>
                        <ul class="list-group list-group-flush">
                            @if (salesReport?.TopProducts != null)
                            {
                                @foreach (var product in salesReport.TopProducts.Take(5))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @product.ProductName
                                        <span class="badge bg-primary rounded-pill">
                                            @product.TotalRevenue.ToString("C")
                                        </span>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </LoadingState>
</PageErrorBoundary>

@code {
    private bool isLoading = true;
    private DateTime startDate = DateTime.Today.AddDays(-30);
    private DateTime endDate = DateTime.Today;
    private Report? salesReport;
    private Report? inventoryReport;
    private Report? customerReport;

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        salesReport = await ReportingService.GenerateSalesReport(startDate, endDate);
        inventoryReport = await ReportingService.GenerateInventoryReport();
        customerReport = await ReportingService.GenerateCustomerReport();
        isLoading = false;
    }

}